#!/usr/bin.env/python
# -*- coding: utf-8 -*-
"""
When analysing single cell data we are ultimately interested in populations
of cells. This module contains the Population class, which controls the
data attaining to a single cell population. A FileGroup (see cytopy.data.fcs)
can contain many Populations (which are embedded within the FileGroup).

Copyright 2020 Ross Burton

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell copies of the
Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""
import pickle
from typing import Iterable
from typing import List

import mongoengine
import numpy as np
from bson.binary import Binary

from cytopy.gating.geometry import PolygonGeom
from cytopy.gating.geometry import PopulationGeometry


class Population(mongoengine.EmbeddedDocument):
    """
    A population of cells identified by either a gate, clustering or supervised algorithm. Stores the
    index of events corresponding to a single population, where the index relates back
    to the primary data in the FileGroup in which a population is embedded.

    Attributes
    ----------
    population_name: str, required
        name of population
    n: int
        number of events associated to this population
    parent: str, required, (default: "root")
        name of parent population
    prop_of_parent: float, required
        proportion of events as a percentage of parent population
    prop_of_total: float, required
        proportion of events as a percentage of all events
    warnings: list, optional
        list of warnings associated to population
    geom: PopulationGeometry
        PopulationGeometry (see cytopy.data.geometry) that defines the gate that
        captures this population.
    definition: str
        relevant for populations generated by a ThresholdGate; defines the source of this
        population e.g. "+" for a 1D threshold or "+-" for a 2D threshold
    index: List[int]
        Array storing index of events that belong to population
    signature: dict
        average of a population feature space (median of each channel); used to match
        children to newly identified populations for annotating
    source: str, required
        Source of the population i.e. what method was used to generate it. Valid choices are:
        "gate", "cluster", "root", or "classifier"
    """

    population_name = mongoengine.StringField()
    n = mongoengine.IntField()
    parent = mongoengine.StringField(required=True, default="root")
    prop_of_parent = mongoengine.FloatField()
    prop_of_total = mongoengine.FloatField()
    geom = mongoengine.EmbeddedDocumentField(PopulationGeometry)
    definition = mongoengine.StringField()
    source = mongoengine.StringField(
        required=True, choices=["root", "gate", "cluster", "classifier", "merger", "subtraction"]
    )
    _index = mongoengine.FileField(db_alias="core", collection_name="population_index")

    @property
    def index(self) -> Iterable[int]:
        idx = pickle.loads(self._index.read())
        self._index.seek(0)
        return idx

    @index.setter
    def index(self, idx: Iterable[int]):
        if isinstance(idx, np.ndarray):
            idx = idx.tolist()
        if self._index:
            self._index.replace(Binary(pickle.dumps(idx, protocol=2)))
        else:
            self._index.new_file()
            self._index.write(Binary(pickle.dumps(idx, protocol=2)))
            self._index.close()


def _check_overlap(left: Population, right: Population, error: bool = True):
    """
    Given two Population objects assuming that they have Polygon geoms (raises assertion error otherwise),
    checks if the population geometries overlap.
    If error is True, raises assertion error if the geometries do not overlap.

    Parameters
    ----------
    left: Population
    right: Population
    error: bool (default = True)

    Returns
    -------
    bool or None

    Raises
    ------
    AssertionError
        If left or right population do not have a Polygon geometry or are not overlapping
    """
    assert all(
        [isinstance(x.geom, PolygonGeom) for x in [left, right]]
    ), "Only Polygon geometries can be checked for overlap"
    overlap = left.geom.shape.intersects(right.geom.shape)
    if error:
        assert overlap, "Invalid: non-overlapping populations"
    return overlap


def _check_transforms_dimensions(left: Population, right: Population):
    """
    Given two Populations, checks if transformation methods and axis match. Raises assertion error if not.

    Parameters
    ----------
    left: Population
    right: Population

    Returns
    -------
    None

    Raises
    ------
    AssertionError
        If geometries are incompatible
    """
    assert (
        left.geom.transform_x == right.geom.transform_x
    ), "X dimension transform differs between left and right populations"
    assert (
        left.geom.transform_y == right.geom.transform_y
    ), "Y dimension transform differs between left and right populations"
    assert left.geom.x == right.geom.x, "X dimension differs between left and right populations"
    assert left.geom.y == right.geom.y, "Y dimension differs between left and right populations"
