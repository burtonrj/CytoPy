#!/usr/bin.env/python
# -*- coding: utf-8 -*-
"""
When analysing single cell data we are ultimately interested in populations
of cells. This module contains the Population class, which controls the
data attaining to a single cell population. A FileGroup (see cytopy.data.fcs)
can contain many Populations (which are embedded within the FileGroup).

Copyright 2020 Ross Burton

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell copies of the
Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""
import pickle
from typing import Iterable
from typing import List

import mongoengine
import numpy as np
import pandas as pd
from bson.binary import Binary
from shapely.geometry import Polygon

from cytopy.utils import transform


class PopulationGeometry(mongoengine.EmbeddedDocument):
    """
    Geometric shape generated by non-threshold generating Gate

    Attributes
    -----------
    x: str
        Name of the X-dimension e.g. CD3, FSC-A etc
    y: str
        Name of the Y-dimension e.g. CD3, FSC-A etc
    transform_x: str
        Transformation method applied to the x-axis
    transform_y: str
        Transformation method applied to the y-axis
    transform_x_kwargs: dict
        Transformation keyword arguments for transform method applied to the x-axis
    transform_y_kwargs: str
        Transformation keyword arguments for transform method applied to the y-axis
    """

    x = mongoengine.StringField()
    y = mongoengine.StringField()
    transform_x = mongoengine.StringField()
    transform_y = mongoengine.StringField()
    transform_x_kwargs = mongoengine.DictField()
    transform_y_kwargs = mongoengine.DictField()
    meta = {"allow_inheritance": True}


class ThresholdGeom(PopulationGeometry):
    """
    Threshold shape. Inherits from PopulationGeometry.
    NOTE: Thresholds should be stored as transformed values and converted to linear space
    using the 'transform_to_linear' method.

    Attributes
    -----------
    x_threshold: float
        Threshold applied to the X-axis
    y_threshold: float
        Threshold applied to the Y-axis
    """

    x_threshold = mongoengine.FloatField()
    y_threshold = mongoengine.FloatField()

    def transform_to_linear(self):
        """
        Thresholds are transformed to their equivalent value in linear space
        according to the transform defined. If transform is None, thresholds
        are returned as saved.

        Returns
        -------
        float, float
        """
        x, y = self.x_threshold, self.y_threshold
        if self.transform_x:
            kwargs = self.transform_x_kwargs or {}
            transformer = transform.TRANSFORMERS.get(self.transform_x)(**kwargs)
            x = transformer.inverse_scale(pd.DataFrame({"x": [self.x_threshold]}), features=["x"])["x"].values[0]
        if self.transform_y:
            kwargs = self.transform_y_kwargs or {}
            transformer = transform.TRANSFORMERS.get(self.transform_y)(**kwargs)
            y = transformer.inverse_scale(pd.DataFrame({"y": [self.y_threshold]}), features=["y"])["y"].values[0]
        return x, y


class PolygonGeom(PopulationGeometry):
    """
    Polygon shape. Inherits from PopulationGeometry.
    NOTE: X and Y values should be stored as transformed values and converted to linear space
    using the 'transform_to_linear' method.

    Attributes
    -----------
    x_values: list
        X-axis coordinates
    y_values: list
        Y-axis coordinates
    """

    x_values = mongoengine.ListField()
    y_values = mongoengine.ListField()

    @property
    def shape(self):
        assert self.x_values is not None and self.y_values is not None, "x and y values not defined for this Polygon"
        return create_polygon(self.x_values, self.y_values)

    def transform_to_linear(self):
        """
        x,y coordinates are transformed to their equivalent value in linear space
        according to the transform defined. If transform is None, coordinates
        are returned as saved.

        Returns
        -------
        numpy.ndarray, numpy.ndarray
        """
        x_values, y_values = self.x_values, self.y_values
        if self.transform_x:
            kwargs = self.transform_x_kwargs or {}
            transformer = transform.TRANSFORMERS.get(self.transform_x)(**kwargs)
            x_values = transformer.inverse_scale(pd.DataFrame({"x": self.x_values}), features=["x"])["x"].values
        if self.transform_y:
            kwargs = self.transform_y_kwargs or {}
            transformer = transform.TRANSFORMERS.get(self.transform_y)(**kwargs)
            y_values = transformer.inverse_scale(pd.DataFrame({"y": self.y_values}), features=["y"])["y"].values
        return x_values, y_values


class Population(mongoengine.EmbeddedDocument):
    """
    A population of cells identified by either a gate, clustering or supervised algorithm. Stores the
    index of events corresponding to a single population, where the index relates back
    to the primary data in the FileGroup in which a population is embedded.

    Attributes
    ----------
    population_name: str, required
        name of population
    n: int
        number of events associated to this population
    parent: str, required, (default: "root")
        name of parent population
    prop_of_parent: float, required
        proportion of events as a percentage of parent population
    prop_of_total: float, required
        proportion of events as a percentage of all events
    warnings: list, optional
        list of warnings associated to population
    geom: PopulationGeometry
        PopulationGeometry (see cytopy.data.geometry) that defines the gate that
        captures this population.
    definition: str
        relevant for populations generated by a ThresholdGate; defines the source of this
        population e.g. "+" for a 1D threshold or "+-" for a 2D threshold
    index: List[int]
        Array storing index of events that belong to population
    signature: dict
        average of a population feature space (median of each channel); used to match
        children to newly identified populations for annotating
    source: str, required
        Source of the population i.e. what method was used to generate it. Valid choices are:
        "gate", "cluster", "root", or "classifier"
    """

    population_name = mongoengine.StringField()
    n = mongoengine.IntField()
    parent = mongoengine.StringField(required=True, default="root")
    prop_of_parent = mongoengine.FloatField()
    prop_of_total = mongoengine.FloatField()
    normalised = mongoengine.BooleanField()
    geom = mongoengine.EmbeddedDocumentField(PopulationGeometry)
    definition = mongoengine.StringField()
    source = mongoengine.StringField(
        required=True, choices=["root", "gate", "cluster", "classifier", "merger", "subtraction"]
    )
    data_source = mongoengine.StringField(default="primary")
    _index = mongoengine.FileField(db_alias="core", collection_name="population_index")

    @property
    def index(self) -> Iterable[int]:
        idx = pickle.loads(self._index.read())
        self._index.seek(0)
        return idx

    @index.setter
    def index(self, idx: Iterable[int]):
        if isinstance(idx, np.ndarray):
            idx = idx.tolist()
        if self._index:
            self._index.replace(Binary(pickle.dumps(idx, protocol=2)))
        else:
            self._index.new_file()
            self._index.write(Binary(pickle.dumps(idx, protocol=2)))
            self._index.close()


def create_polygon(x: List[float], y: List[float]) -> Polygon:
    """
    Given a list of x coordinated and a list of y coordinates, generate a shapely Polygon

    Parameters
    ----------
    x: list
    y: list

    Returns
    -------
    shapely.geometry.Polygon
    """
    return Polygon([(x, y) for x, y in zip(x, y)])
